# Modular zsh loader: sources ~/.zsh/??-*.zsh*
ZSH_DIR="$HOME/.zsh"
[ -d "$ZSH_DIR" ] || mkdir -p "$ZSH_DIR"

# Source files in deterministic order: 00-*, 10-*, ...
for f in "$ZSH_DIR"/??-*.zsh*; do
	[ -r "$f" ] && source "$f"
done
export VISUAL="mate -w "
if [[ -f "/opt/homebrew/bin/brew" ]] then
export HOMEBREW_NO_EMOJI=1
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_NO_INSTALL_CLEANUP=1
export HOMEBREW_NO_ENV_HINTS=1
export HOMEBREW_NO_AUTO_UPDATE=1
eval "$(/opt/homebrew/bin/brew shellenv)"
fi

export PATH=$HOME/bin:$HOME/.local/bin:$HOME/.cargo/bin:/opt/local/bin:/opt/local/sbin:$PATH
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}
{{ end }}
export FPATH=$HOME/.local/share/zsh/site-functions:$FPATH
export ET_NO_TELEMETRY=1
bindkey -e
export RCLONE_STATS=10s
export RCLONE_CHECKERS=16
export RCLONE_STATS_FILE_NAME_LENGTH=0
export RCLONE_LOG_FILE=/tmp/rclone.log
setopt PROMPT_SUBST
PROMPT='${(e):-"$(if [[ -n $SSH_CONNECTION ]]; then echo -n \"%m \"; fi)"}${(e):-"$(ret=$?; if [[ $ret -ne 0 ]]; then echo -n "exit:$ret "; fi)"}%2~ %# '
#options
setopt NO_CASE_GLOB
setopt AUTO_CD
setopt CORRECT
#setopt CORRECT_ALL

HISTSIZE=10000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups


#completions
# case insensitive path-completion
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*'
# partial completion suggestions
zstyle ':completion:*' list-suffixes
zstyle ':completion:*' expand prefix suffix
autoload -Uz compinit && compinit
autoload -U bashcompinit && bashcompinit
#functions
mkcd() {
mkdir -p "$1"
cd "$1"
}
ffdl() { fanficfare --download-list=$* }
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

export PYTHONPYCACHEPREFIX=/tmp/pycache
export RUFF_CACHE_DIR=/tmp/ruffcache
